Hi I am Raghav & Today we will learn:
What is Docker ?
Docker is the world’s leading software container platform
Docker makes the process of application deployment very easy and efficient and resolves a lot of issues related to deploying applications

Docker is a tool designed to make it easier to deploy and run applications by using containers

Docker gives you a standard way of packaging your application with all its dependencies in a container

Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. 

Understand Docker with analogy of the Shipping industry
How a real world problem was resolved using container


Today we will learn: How Docker works ?
Understand a general workflow of docker
Difference between virtualization and containerization
Understand docker client server architecture`
Understand:
Docker file
Docker images
Docker Containers
Docker Hub / Registry
Docker client
Docker server / daemon
Docker engine


Today we will learn:
Benefits of using Docker
Build app only once
No worries that the application will not perform the same way it did on testing env
Portability
Version Control
Isolation
Productivity

Docker simplifies
DevOps


https://labs.play-with-docker.com/


sudo pacman -S docker
sudo usermod -aG docker $USER

Prerequisite
OS should be 64 bit
Linux kernel ver 3.10 or greater

command to check : uname -r

STEP 1 - Connect to Linux system

STEP 2 - Install DOCKER
sudo yum -y update
sudo yum install -y docker

docker
docker --version

STEP 3 - start DOCKER
sudo service docker start
sudo usermod -a -G docker "user"

docker info

docker run hello-world : to run hello-world image

docker images : to get list of images present locally

docker ps : to get list of running containers

docker ps -a .  : to get list of all containers

STEP 4 - stop DOCKER
sudo service docker stop
uninstall DOCKER
sudo yum remove docker

HELPFUL TIPS
You can visit - https://get.docker.com/
for more installation related help

To install docker from binaries
https://docs.docker.com/engine/instal...

Installation steps for amazon ec2
http://docs.aws.amazon.com/AmazonECS/...
   


Docker Toolbox releases - https://github.com/docker/toolbox/rel...
FREE Tutorials - https://automationstepbystep.com/
Docker Toolbox GitHub - https://github.com/docker/toolbox/rel...

There is a deployment template on the Azure marketplace, if you want to setup Docker Engine on Windows in Azure. Very easy install : https://azuremarketplace.microsoft.co...  



How to install Docker on MacOS

Prerequisites
Docker - Mac OS Yosemite 10.10.3 or above
Docker Toolbox -  mac OS 10.8 “Mountain Lion” or newer

STEP 1 
Install DOCKER

STEP 2
validate INSTALLATION
run some docker commands

STEP 3
uninstall DOCKER


Docker Basic Commands
Step by Step for Beginners
Basic
: docker version
: docker -v
: docker info
: docker --help
: docker login
————————————
Images
: docker images
: docker pull
: docker rmi
————————————
Containers
: docker ps
: docker run
: docker start
: docker stop
————————————
System
: docker stats
: docker system df
: docker system prune


website - https://automationstepbystep.com/
A dangling image is one that is not tagged and is not referenced by any container.
https://docs.docker.com/config/pruning/
FREE tutorials - https://automationstepbystep.com/
Hi I am Raghav and Today we will learn :
1. What are images
2. How to pull image
3. How to run a container using an image
4. Basic Commands

TIPS & TRICKS

What are Images
Docker Images are templates used to create Docker containers
Container is a running instance of image

Where are Images Stored
Registries (e.g. docker hub)
Can be stored locally or remote

: docker images --help
: docker pull image
: docker images
: docker images -q
: docker images -f “dangling=false”
: docker images -f “dangling=false” -q

: docker run image
: docker rmi image
: docker rmi -f image

: docker inspect
: docker history imageName

Today we will learn :
1. What are Containers
2. How to create Containers
3. How to start / stop Containers
4. Basic Commands

TIPS & TRICKS

What are Containers:
Containers are running instances of Docker Images

COMMANDS
: docker ps
: docker run ImageName
: docker start ContainerName/ID
: docker stop ContainerName/ID

: docker pause ContainerName/ID
: docker unpause  ContainerName/ID

: docker top ContainerName/ID
: docker stats ContainerName/ID

: docker attach ContainerName/ID

: docker kill ContainerName/ID
: docker rm ContainerName/ID

: docker history ImageName/ID

References:
https://www.google.co.in/search?rlz=1...

https://docs.docker.com/engine/refere...

Notes

A container image is a lightweight, stand-alone, executable package of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings.

Features of Containers:

Are lightweight

Fewer resources are used

Booting of containers is very fast

Can start, stop, kill, remove containers easily and quickly

Operating System resources can be shared within Docker

Containers run on the same machine sharing the same Operating system Kernel, this makes it faster

You can use the command
docker container create
to create a container in stopped state
_____________________________________________________________

#DockerContainers





Website - https://automationstepbystep.com/
Today we will learn :
1. What is Dockerfile
2. How to create Dockerfile
3. How to build image from Dockerfile
4. Basic Commands

TIPS & TRICKS

Dockerfile : 
A text file with instructions to build image
Automation of Docker Image Creation

FROM
RUN
CMD

Step 1 : Create a file named Dockerfile

Step 2 : Add instructions in Dockerfile

Step 3 : Build dockerfile to create image

Step 4 : Run image to create container

COMMANDS
: docker build 
: docker build -t ImageName:Tag directoryOfDocekrfile

: docker run image


I am Raghav & Today we will learn :
1. What | Why - Docker Compose
2. How to install
3. How to create docker compose file
4. How to use docker compose file to create services
5. Basic Commands

TIPS
Docker compose
: tool for defining & running multi-container docker applications
: use yaml files to configure application services (docker-compose.yml)
: can start all services with a single command : docker compose up
: can stop all services with a single command : docker compose down
: can scale up selected services when required

Step 1 : install docker compose
   (already installed on windows and mac with docker)
   docker-compose -v
   
   2 Ways

   1.  https://github.com/docker/compose/rel...

   2. Using PIP
    pip install -U docker-compose

Step 2 : Create docker compose file at any location on your system
   docker-compose.yml

Step 3 : Check the validity of file by command
    docker-compose config

Step 4 : Run docker-compose.yml file by command
   docker-compose up -d

Steps 5 : Bring down application by command
   docker-compose down

TIPS
How to scale services

—scale
docker-compose up -d --scale database=4


Today we will learn:
1. What are Volumes
2. How to create / list / delete volumes
3. How to attach volume to a container
4. How to share volume among containers
5. What are bind mounts
Volumes are the preferred mechanism for persisting data generated by and used by Docker containers

: docker volume  //get information
: docker volume create
: docker volume ls
: docker volume inspect
: docker volume rm
: docker volume prune

Instead of deleting containers one by one of docker ps -a , we can use docker container prune.  and for docker ps (running containers) we can use  docker rm $(ps -aq)

Use of Volumes
===========
Decoupling container from storage
Share volume (storage/data) among different containers
Attach volume to container
On deleting container volume does not delete

Commands
docker run --name MyJenkins1 -v myvol1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins
docker run --name MyJenkins2 -v myvol1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins
docker run --name MyJenkins3 -v /Users/raghav/Desktop/Jenkins_Home:/var/jenkins_home -p 9191:8080 -p 40000:50000 jenkins

References
https://hub.docker.com/_/jenkins/
https://docs.docker.com/storage/volumes/

NOTES

By default all files created inside a container are stored on a writable container layer

The data doesn’t persist when that container is no longer running

A container’s writable layer is tightly coupled to the host machine where the container is running. You can’t easily move the data somewhere else.

Docker has two options for containers to store files in the host machine
so that the files are persisted even after the container stops

VOLUMES  and  BIND MOUNTS

Volumes are stored in a part of the host filesystem which is managed by Docker

Non-Docker processes should not modify this part of the filesystem

Bind mounts may be stored anywhere on the host system

Non-Docker processes on the Docker host or a Docker container can modify them at any time

In Bind Mounts, the file or directory is referenced by its full path on the host machine. 


Volumes are the best way to persist data in Docker

volumes are managed by Docker and are isolated from the core functionality of the host machine

A given volume can be mounted into multiple containers simultaneously.

When no running container is using a volume, the volume is still available to Docker and is not removed automatically. You can remove unused volumes using docker volume prune.

When you mount a volume, it may be named or anonymous. 

Anonymous volumes are not given an explicit name when they are first mounted into a container

Volumes also support the use of volume drivers, which allow you to store your data on remote hosts or cloud providers, among other possibilities.